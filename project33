#include <cuda.h> //CUDA library
#include <stdio.h> //Standard input-output
#include <time.h> //Time library to manipulate dates and times
//a kernel function that can be called from host function to
//generate a grid of threads on a device
__global__ void vectorFill(float *E, int size)
{
//index bertipe integer diinisialisasi nilai dari thread yang //dijumlahkan dengan ukuran block dan gridnya
int index = blockIdx.y * blockDim.y + threadIdx.y;
//memasukkan nilai pada array dengan index yang sudah //diinisialisasi sebelumnya dikalikan ukuran vektor
E[index] = (float)index * size;
}
//a CUDA host function
__host__ void vectorFill_naive(float *E, int size)
{
int i = 0;
//looping biasa tanpa menggunakan thread
for(i = 0; i < size; i++)
{
E[i] = (float)i * size;
}
}
//Fungsi untuk menjalankan program pada host //maupun device
void run(int M) {
long size = M * sizeof(float);
float* E = (float*) malloc(size);
float* Ed;
clock_t start, end; //tipe clock_t dari time.h
double diff;
printf("%12d\t\t ", M);
//an API's function to allocate a piece of global memory for //an object
cudaMalloc((void**)&Ed, size);
//transfer data dari memory host ke device
cudaMemcpy(Ed, E, size, cudaMemcpyHostToDevice);
//describing configuration blocks
dim3 dimBlock(14, 14);
//describes the configuration of grid
dim3 dimGrid(2,2);
//at device
start = clock();
vectorFill<<<dimGrid, dimBlock>>>(Ed, M);
//agar penghitungan dalam thread selesai semuanya
cudaThreadSynchronize();
cudaMemcpy(E, Ed, size, cudaMemcpyDeviceToHost); //meng-copy kembali nilai dari memory device ke host
//mengosongkan isi memory yang sudah dialokasikan sebelumnya
cudaFree(Ed);
end = clock();
diff = ((double) end - start)/(double)CLOCKS_PER_SEC;
diff *= 2500;
printf(" %10.7f \t\t ", diff);
//at host
float* G = (float*) malloc(size);
start = clock();
vectorFill_naive(G, M);
free(G);
end = clock();
diff = ((double) end - start)/(double)CLOCKS_PER_SEC;
diff *= 2500;
printf(" %10.7f \n", diff);
}
int main() //fungsi main dalam program ini
{
int i = 0;
int M = 0;
int N = 0;
printf("Masukkan maksimum vector size: ");
scanf("%i", &M);
printf("Masukkan interval (dikali) ukuran vector size: ");
scanf("%i", &N);
printf("Vector Length \t Device function time(ms) \t Host function time(ms)\n");
for(i = 1; i < M; i *= N)
{
run(i);
}
printf("\n");
return 0;
}